<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppSettings" xml:space="preserve">
    <value>App Settings</value>
  </data>
  <data name="AppSettingsDarkTheme" xml:space="preserve">
    <value>Use a dark theme</value>
  </data>
  <data name="AppSettingsDarkThemeInstructions" xml:space="preserve">
    <value>Changing the theme will restart the current game.</value>
  </data>
  <data name="AppSettingsIntro" xml:space="preserve">
    <value>Settings here apply to all games in the Grid Games app.</value>
  </data>
  <data name="BonusAnswerRequired" xml:space="preserve">
    <value>Please check one or more WCAG before submitting your answer. Groups of WCAG will be shown after making selections at the WCAG group pickers.</value>
  </data>
  <data name="BrowsePicture" xml:space="preserve">
    <value>Browse for picture</value>
  </data>
  <data name="CellLocalizedControlType" xml:space="preserve">
    <value>Cell</value>
  </data>
  <data name="ChooseEightPictures" xml:space="preserve">
    <value>Please choose a picture in a folder that contains exactly 8 pictures.</value>
  </data>
  <data name="ClearSelection" xml:space="preserve">
    <value>Clear Selection</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="ColumnNeeds" xml:space="preserve">
    <value>Column needs </value>
  </data>
  <data name="CompletedSquaresPictureInMoves" xml:space="preserve">
    <value>You completed {0} in {1} goes.

Would you like to play another game?</value>
  </data>
  <data name="CompletedSweeper" xml:space="preserve">
    <value>You helped all the frogs!

Would you like to play another game?</value>
  </data>
  <data name="Congratulations" xml:space="preserve">
    <value>Congratulations!</value>
  </data>
  <data name="CorrectWCAG" xml:space="preserve">
    <value>You found {0}. Now where's {1}?</value>
  </data>
  <data name="CountOfBlankSquares" xml:space="preserve">
    <value>Count of blank squares:</value>
  </data>
  <data name="CustomPicturesInstructions" xml:space="preserve">
    <value>To prepare custom pictures for showing in the Pairs game, first create a new folder and copy in the eight pictures that you'd like to have shown. Then create a text file in the same folder, called "PairsGamePictureDetails.txt". Edit the text file so that each line in the file contains the accessible details for one of the pictures in the folder. A line starts with the filename of the picture, followed by a tab, and then the accessible name of the picture. If a description is also provided, the name is followed by a tab, and then the description.</value>
  </data>
  <data name="DefaultMatchingCard1Description" xml:space="preserve">
    <value>A smiling man with a red coat and arms outstretched, standing in front of 3 large Daleks and a TARDIS. The Daleks seem to be raised above the grass beneath them, and a slightly cloudy sky is in the background.</value>
  </data>
  <data name="DefaultMatchingCard1Name" xml:space="preserve">
    <value>Daleks in Blackpool</value>
  </data>
  <data name="DefaultMatchingCard2Description" xml:space="preserve">
    <value>A small brown stone lighthouse, with an upper small balcony and a lower bigger balcony. A covered sitting area is at the base of the lighthouse. In front of the lighthouse in the stone ground are anchor and compass symbols, and in the background is a grey cloudy sky.</value>
  </data>
  <data name="DefaultMatchingCard2Name" xml:space="preserve">
    <value>Lower Lighthouse in Fleetwood</value>
  </data>
  <data name="DefaultMatchingCard3Description" xml:space="preserve">
    <value>A first-person view looking down on two portions of fish and chips in trays and paper. In the background is a concrete path, and two partially shown shoes.</value>
  </data>
  <data name="DefaultMatchingCard3Name" xml:space="preserve">
    <value>Fish and Chips in Cleveleys</value>
  </data>
  <data name="DefaultMatchingCard4Description" xml:space="preserve">
    <value>A small, very old hexagonal red stone building, with castellated battlements housing a cross. Arched windows on the sides of the building are bricked-up from the inside. The building sits on grass, with a bay and cloudy sky in the background.</value>
  </data>
  <data name="DefaultMatchingCard4Name" xml:space="preserve">
    <value>Cockersand Abbey</value>
  </data>
  <data name="DefaultMatchingCard5Description" xml:space="preserve">
    <value>A white windmill with a black roof and black sails. The windmill has stairs going up to a black door, and black windows. In the background is a street of houses and a clear, blue sky.</value>
  </data>
  <data name="DefaultMatchingCard5Name" xml:space="preserve">
    <value>Lytham St Annes Windmill</value>
  </data>
  <data name="DefaultMatchingCard6Description" xml:space="preserve">
    <value>The stone ruins of a large, very old abbey. The abbey has no roof or windows, and the sun shines through the arches from behind the abbey. In the foreground is a lawn housing multiple large stone graves, and in the background is a clear blue sky.</value>
  </data>
  <data name="DefaultMatchingCard6Name" xml:space="preserve">
    <value>Bolton Abbey</value>
  </data>
  <data name="DefaultMatchingCard7Description" xml:space="preserve">
    <value>A large stone obelisk in a town square, with buildings and trees nearby. The sun shines on the obelisk, with a slightly cloudy, blue sky in the background. At the base of the obelisk are six red wreaths.</value>
  </data>
  <data name="DefaultMatchingCard7Name" xml:space="preserve">
    <value>Harrogate Obelisk</value>
  </data>
  <data name="DefaultMatchingCard8Description" xml:space="preserve">
    <value>A small square stone building with an opening on the near side. Above the opening is a Greek inscription. Railing surrounds the top of the building, and a sundial sits at the centre of the top. In the background is rocky grassland, with rolling hills in the far background along with a slightly cloudy, blue sky.</value>
  </data>
  <data name="DefaultMatchingCard8Name" xml:space="preserve">
    <value>Hampsfell Hospice</value>
  </data>
  <data name="DefaultSquare10Name" xml:space="preserve">
    <value>10</value>
  </data>
  <data name="DefaultSquare11Name" xml:space="preserve">
    <value>11</value>
  </data>
  <data name="DefaultSquare12Name" xml:space="preserve">
    <value>12</value>
  </data>
  <data name="DefaultSquare13Name" xml:space="preserve">
    <value>13</value>
  </data>
  <data name="DefaultSquare14Name" xml:space="preserve">
    <value>14</value>
  </data>
  <data name="DefaultSquare15Name" xml:space="preserve">
    <value>15</value>
  </data>
  <data name="DefaultSquare1Name" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="DefaultSquare2Name" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="DefaultSquare3Name" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="DefaultSquare4Name" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="DefaultSquare5Name" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="DefaultSquare6Name" xml:space="preserve">
    <value>6</value>
  </data>
  <data name="DefaultSquare7Name" xml:space="preserve">
    <value>7</value>
  </data>
  <data name="DefaultSquare8Name" xml:space="preserve">
    <value>8</value>
  </data>
  <data name="DefaultSquare9Name" xml:space="preserve">
    <value>9</value>
  </data>
  <data name="DefaultSquareEmpty" xml:space="preserve">
    <value>Empty</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="DifficultyLevel" xml:space="preserve">
    <value>Difficulty level</value>
  </data>
  <data name="Down" xml:space="preserve">
    <value>down</value>
  </data>
  <data name="EdgeOfBoard" xml:space="preserve">
    <value>Edge of board</value>
  </data>
  <data name="Eight" xml:space="preserve">
    <value>eight</value>
  </data>
  <data name="Eleven" xml:space="preserve">
    <value>eleven</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>empty</value>
  </data>
  <data name="FaceDown" xml:space="preserve">
    <value>Face down</value>
  </data>
  <data name="FailedSweeper" xml:space="preserve">
    <value>Nice try, but a resting frog got swept up with the leaves!

Would you like to play another game?</value>
  </data>
  <data name="FallthroughTapMessage" xml:space="preserve">
    <value>Please use the keyboard to play the game.

Review the Help content for details on how to play the game using only the keyboard.</value>
  </data>
  <data name="Fifteen" xml:space="preserve">
    <value>fifteen</value>
  </data>
  <data name="FillCardAndClip" xml:space="preserve">
    <value>Fill card and clip</value>
  </data>
  <data name="FillCardWithoutClipping" xml:space="preserve">
    <value>Fill card without clipping</value>
  </data>
  <data name="Five" xml:space="preserve">
    <value>five</value>
  </data>
  <data name="Four" xml:space="preserve">
    <value>four</value>
  </data>
  <data name="Fourteen" xml:space="preserve">
    <value>fourteen</value>
  </data>
  <data name="Frog" xml:space="preserve">
    <value>Frog</value>
  </data>
  <data name="GameReady" xml:space="preserve">
    <value>Game is ready to play.</value>
  </data>
  <data name="GetTip" xml:space="preserve">
    <value>Get a tip</value>
  </data>
  <data name="GridGames" xml:space="preserve">
    <value>Grid Games</value>
  </data>
  <data name="GridLocalizedControlType" xml:space="preserve">
    <value>Grid</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="GroupNeeds" xml:space="preserve">
    <value>Group needs </value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HelpContentPairs" xml:space="preserve">
    <value>The Pairs Game is based on a traditional card matching game, where face-down cards are turned over in order to find pairs of cards.

When the game is run, a 4 by 4 grid of blank squares appears, each square representing a face-down card. When one of the cards is turned up, it reveals an image on the face-up card. When another card is turned up, an image is also shown on that second face-up card. If the two images are the same, then the cards are considered to be matched, and will not change again for the rest of the game. If the images do not match, then the cards are considered to be unmatched, and cards must be then turned back down. These steps are then repeated until all matching images have been found, and a "Congratulations" window appears.

The Pairs game can be played using touch, mouse, speech or keyboard. To use the keyboard to play the game, first use the Tab key to move keyboard focus into the grid of cards. Once keyboard focus in on the grid, use the arrow keys to move to a card of interest. Once at a card of interest, press either the Space key or Enter key to turn the card up. To turn two unmatched face-up cards back down, press Space or Enter at any card.

Press the F1 key to show this Help content, or the F5 key to restart a game. 

Press and release the Alt key to have any available access keys shown. For example, press Alt+S to have the game's Settings page shown. To have your own pictures shown in the game, along with custom accessible names and descriptions, please follow the steps described in the Settings page.

At the top left corner of the game is the Open Navigation button, which can be used to restart this game or to move to another game.</value>
  </data>
  <data name="HelpContentSquares" xml:space="preserve">
    <value>The Squares Game is based on a square sliding puzzle, where squares in a grid of squares are rearranged by the player to form an ordered sequence of squares in the grid.

When the game is run, a 4 by 4 grid of squares appears, with fifteen of those squares occupied with a movable element, and one square being empty. When a square is clicked, if it is adjacent to the empty square, the clicked square moves into the empty square. The space where the tapped square was then becomes the empty square. The aim is to arrange all the squares in a sorted order, leaving the empty square in the bottom right corner of the grid. Once all the squares are ordered, a "Congratulations" window appears.

The Squares game can only be played using the keyboard, and squares cannot be moved using a mouse, touch, or speech. To use the keyboard to play the game, first use the Tab key to move keyboard focus into the grid of squares. Once keyboard focus in on the grid, use the arrow keys to move to a square of interest. Once at a square of interest, press either the Space key or Enter key to click the square.

Press the F1 key to show this Help content, or the F5 key to restart a game. 

Press and release the Alt key to have any available access keys shown. For example, press Alt+S to have the game's Settings page shown. To have your own picture shown in the game, please follow the steps described in the Settings page.

At the top left corner of the game is the Open Navigation button, which can be used to restart this game or to move to another game.</value>
  </data>
  <data name="HelpContentSudoku" xml:space="preserve">
    <value>The Sudoku game shows a grid of 9-by-9 squares. Most of the squares are blank when the game starts, but some of the squares show a number from 1 to 9. The number of squares showing a number depends on the current game settings. To win the game, type a number from 1 to 9 in each of the blank squares, such that each row and each column in the game contains the numbers 1 to 9. No number can be duplicated on any row or any column. 

Use the arrow keys to move between squares in the grid, and when you've reached a square of interest, type the number to be added to the square. To clear a number you added earlier, press the Space or Enter keys. Note that pressing the right arrow when at the last square in a row, or the left arrow when at the first square in a row, will not move you to another row. Instead you will stay on the current square. 

Pressing the Home or End keys will move you to the first or last square on the current row, and pressing the PageUp or PageDown keys will move you to the first or last square on the current column. 

Pressing Alt plus any of the Left, Right, Up, or Down arrow keys will attempt to move you in that direction to the next square whose number-showing state is different from the current square. For example, if you're at a square showing a number, you will move to the next square that does not show a number.

Please note that following a press of one of the navigation keys just mentioned, visual selection feedback does not appear on the destination square. Selection feedback will show again once an arrow key is pressed after the move.

In addition, the grid is divided into nine 3-by-3 groups, with group 1 containing the nine squares at the top left of the grid, and group 9 containing the nine squares at the bottom right of the grid. Each group must contain the numbers 1 to 9, with no number duplicated in the group. 

The current number of blank squares in the grid is shown above the grid. When a number is added to the last remaining blank square, a message appears saying whether the game has been won or not.

At the top left corner of the game is the Open Navigation button, which can be used to restart this game or to move to another game. Press the F1 key to show this Help content, or the F5 key to restart a game. 

Screen Reader Usage: When playing the game with a screen reader, the Sudoku grid of squares is announced as a Grid with a name of "Sudoku Games". The grid contains a collection of 81 Cells, and a Cell's name is the number shown on the Cell, followed by "Fixed", if the number cannot be changed, or "Guess", if the number has been added to the square by you. If no number is shown on the Cell, its name is either "No number shown" or "x", depending on the current Sudoku settings. The additional information associated with a Cell is the Cell's group, followed by its row and column information. For example, if when the game starts the square at the top left corner of the grid shows the number 3, then a screen reader will announce "3 Fixed, Cell" when navigating to the square. And depending on the screen reader's settings, may then go on to announce "Group 1, Row 1 Column 1". 

When action is taken at a square, the game encourages a screen reader to announce the new state of the square. For example, if you add a number to a square, a screen reader may say "Now 8 Guess", or if you clear a number from a square, a screen reader may say either "Now No number shown" or "Now x", depending on the current Sudoku settings. 

The Sudoku game supports a number of keyboard shortcuts which encourage screen readers to make specific announcements relating to the current state of the game. The keyboard shortcuts are as follows:

Alt plus R. Announce all numbers that are not showing in the current row.
Alt plus C. Announce all numbers that are not showing in the current column.
Alt plus G. Announce all numbers that are not showing in the current group.
Alt plus a number from 1 to 9. Announce whether the current row, column, and group contains the number.

Windows Speech Recognition Usage: To play the game using Windows Speech Recognition, say: “Select square”, which will result in all squares that were originally empty showing a unique number. Then say the number shown at the square that you want to change, and that square will be selected. Once the square is selected, say: “Press” followed by the number you want shown in the square.

Acknowledgement: The game uses software kindly made available by Firat Eski, at https://github.com/firateski/SudokuLibrary. The associated license for the software is included below.
 
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</value>
  </data>
  <data name="HelpContentSweeper" xml:space="preserve">
    <value>The Leaf Sweeper Game is based on the traditional Minesweeper game, but the aim of this game is to sweep the leaves off a group of paving stones without disturbing two frogs resting under the leaves on two of the stones.

When the game is run, a 4-by-4 grid of squares appears, with each square showing a leaf symbol. The squares represent a group of paving stones covered with leaves. First clear the leaves off one of the stones by clicking on the stone. When using a keyboard, move focus to the grid of squares and arrow around to move to the stone of interest, and then press Space or Enter to clear the leaves off the stone. When the leaves are cleared, the number of frogs in the stones adjacent to that stone will be shown on the stone. If no frogs are on adjacent stones, then the clicked stone shows nothing. In addition, all adjacent stones with no frogs will also be cleared until blocked by stones with one or more stones showing nearby frog counts.

When you feel you know that a stone must have a frog resting beneath its leaves, mark it as "Query Frog" by showing the stones context menu and select "Change Query Frog state". To change the Query Frog state when using a screen reader, use the navigate the screen reader to a non-visual button on the stone, and click the button. 

Once all paving stones in the grid which don't have resting frogs on them have been cleared, you've won the game. If while playing the game you click on a stone which does have a resting frog on it, the game is lost. If the game is lost, both resting frogs will be revealed.

Press the F1 key to show this Help content, or the F5 key to restart a game.

At the top left corner of the game is the Open Navigation button, which can be used to restart this game or to move to another game.</value>
  </data>
  <data name="IncorrectWCAG" xml:space="preserve">
    <value>{0} isn't {1}.</value>
  </data>
  <data name="JumpToDifferentStateNotPossible" xml:space="preserve">
    <value>No more {0} squares.</value>
  </data>
  <data name="Large" xml:space="preserve">
    <value>Large</value>
  </data>
  <data name="Largest" xml:space="preserve">
    <value>Largest</value>
  </data>
  <data name="Leaf" xml:space="preserve">
    <value>Leaf</value>
  </data>
  <data name="Left" xml:space="preserve">
    <value>left</value>
  </data>
  <data name="LoadedCustomPictures" xml:space="preserve">
    <value>Loaded custom pictures</value>
  </data>
  <data name="LoadingPleaseWait" xml:space="preserve">
    <value>Please wait a moment while the picture is loaded into the squares.</value>
  </data>
  <data name="Matched" xml:space="preserve">
    <value>Matched</value>
  </data>
  <data name="MatchingWonInMoves" xml:space="preserve">
    <value>You won the game in {0} goes.

Would you like to play another game?</value>
  </data>
  <data name="Medium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="MissingPairsGamePictureDetails" xml:space="preserve">
    <value>The folder containing the 8 picture must also contain a PairsGamePictureDetails file. Please review the Pairs Help for more details.</value>
  </data>
  <data name="Moved" xml:space="preserve">
    <value>Moved</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="Nine" xml:space="preserve">
    <value>nine</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NoFolderSelected" xml:space="preserve">
    <value>No folder selected</value>
  </data>
  <data name="NoMovePossible" xml:space="preserve">
    <value>A move is not possible from here.</value>
  </data>
  <data name="NoneMissing" xml:space="preserve">
    <value> has no empty squares.</value>
  </data>
  <data name="NoResponse" xml:space="preserve">
    <value>No response</value>
  </data>
  <data name="Numbered" xml:space="preserve">
    <value>numbered</value>
  </data>
  <data name="NumberNotShownInRowColumnGroup" xml:space="preserve">
    <value>{0} is not shown in this row, column, or group.</value>
  </data>
  <data name="NumberShownPrefix" xml:space="preserve">
    <value>{0} is shown in this </value>
  </data>
  <data name="NumberSize" xml:space="preserve">
    <value>Number size</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="One" xml:space="preserve">
    <value>one</value>
  </data>
  <data name="Oops" xml:space="preserve">
    <value>Oops!</value>
  </data>
  <data name="Pairs" xml:space="preserve">
    <value>Pairs</value>
  </data>
  <data name="PairsCustomPicturesViewSample" xml:space="preserve">
    <value>A sample custom pictures folder is available at https://github.com/gbarkerz/GridGames/tree/master/GridGames/PairsSamples/LittleMoretonHall. Consider making your own set of pictures and accessible details, and showing in the Pairs game.</value>
  </data>
  <data name="PairsGameHelp" xml:space="preserve">
    <value>Pairs Help</value>
  </data>
  <data name="PairsHelpEditor" xml:space="preserve">
    <value>Pairs Help</value>
  </data>
  <data name="PairsSettings" xml:space="preserve">
    <value>Pairs Settings</value>
  </data>
  <data name="PairsWelcome" xml:space="preserve">
    <value>Welcome to the Pairs Game!</value>
  </data>
  <data name="PictureAspectInstructions" xml:space="preserve">
    <value>Pick how the pictures will be shown in the cards.</value>
  </data>
  <data name="PictureAspectLabel" xml:space="preserve">
    <value>Scale type</value>
  </data>
  <data name="PictureNameInstructions" xml:space="preserve">
    <value>Optionally provide a name to be shown when the game is completed.</value>
  </data>
  <data name="PictureNameLabel" xml:space="preserve">
    <value>Picture Name:</value>
  </data>
  <data name="PicturePath" xml:space="preserve">
    <value>Selected picture folder:</value>
  </data>
  <data name="PlaySound" xml:space="preserve">
    <value>Play a sound</value>
  </data>
  <data name="PlaySoundAndScreenReaderAnnouncement" xml:space="preserve">
    <value>Play a sound and make a screen reader announcement</value>
  </data>
  <data name="QueryFrog" xml:space="preserve">
    <value>Query frog</value>
  </data>
  <data name="Response" xml:space="preserve">
    <value>Response:</value>
  </data>
  <data name="RestartGame" xml:space="preserve">
    <value>Restart Game</value>
  </data>
  <data name="RestoreDefaultAnnouncement" xml:space="preserve">
    <value>Restore default announcement</value>
  </data>
  <data name="Right" xml:space="preserve">
    <value>right</value>
  </data>
  <data name="Row" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="RowNeeds" xml:space="preserve">
    <value>Row needs </value>
  </data>
  <data name="ScreenReaderAnnouncement" xml:space="preserve">
    <value>Make a screen reader announcement</value>
  </data>
  <data name="Selected" xml:space="preserve">
    <value>Selected:</value>
  </data>
  <data name="SelectPicture" xml:space="preserve">
    <value>Select picture folder</value>
  </data>
  <data name="SelectPictureFolderInstructionsFileInFolder" xml:space="preserve">
    <value>To select the picture folder, browse to the folder of interest and select any file in that folder.</value>
  </data>
  <data name="SelectPictureFolderInstructionsFiles" xml:space="preserve">
    <value>To select the pictures and their descriptions, browse to the folder of interest and select the eight picture files and the PairsGamePictureDetails.txt file.</value>
  </data>
  <data name="SelectPictureFolderInstructionsFolder" xml:space="preserve">
    <value>To select the picture folder, browse to the folder of interest and select it.</value>
  </data>
  <data name="Seven" xml:space="preserve">
    <value>seven</value>
  </data>
  <data name="ShowBonusQuestion" xml:space="preserve">
    <value>Show bonus WCAG questions</value>
  </data>
  <data name="ShowCustomPictures" xml:space="preserve">
    <value>Show custom pictures</value>
  </data>
  <data name="ShowFullPicture" xml:space="preserve">
    <value>Show full picture</value>
  </data>
  <data name="ShowNumbers" xml:space="preserve">
    <value>Show numbers</value>
  </data>
  <data name="ShowPicture" xml:space="preserve">
    <value>Show picture</value>
  </data>
  <data name="Six" xml:space="preserve">
    <value>six</value>
  </data>
  <data name="Sixteen" xml:space="preserve">
    <value>sixteen</value>
  </data>
  <data name="Small" xml:space="preserve">
    <value>Small</value>
  </data>
  <data name="SpeechTargetButtonPrefix" xml:space="preserve">
    <value>Select square</value>
  </data>
  <data name="SquareLocationAnnouncementDefault" xml:space="preserve">
    <value>Row $r Column $c, Group $g</value>
  </data>
  <data name="SquareLocationAnnouncementEditorName" xml:space="preserve">
    <value>Square location announcement format</value>
  </data>
  <data name="SquareLocationAnnouncementInstructions" xml:space="preserve">
    <value>Specify the format for a screen reader's announcement of a square's group, row, and column number. Enter whatever text and punctuation you would like here, and wherever you put $r or $c or $g, the square's row or column or group would be announced. For example, if you put "Group $g, Row $r Column $c" then the announcement might be "Group 3, Row 8 Column 1". Or if you put "$r $c, G $g" then the announcement might be "8 1, G 3".</value>
  </data>
  <data name="Squares" xml:space="preserve">
    <value>Squares</value>
  </data>
  <data name="SquaresGameHelp" xml:space="preserve">
    <value>Squares Help</value>
  </data>
  <data name="SquaresHelpEditor" xml:space="preserve">
    <value>Squares Help</value>
  </data>
  <data name="SquaresSettings" xml:space="preserve">
    <value>Squares Settings</value>
  </data>
  <data name="SquaresSettingsInstructions" xml:space="preserve">
    <value>Please specify what you would like to appear inside the squares shown in the grid.</value>
  </data>
  <data name="SquaresWelcome" xml:space="preserve">
    <value>Welcome to the Squares Game!</value>
  </data>
  <data name="SquaresWonInGoes" xml:space="preserve">
    <value>You won the game in {0} moves.

Would you like to play another game?</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>Would you like to play another game?</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>When the game is run, a 4 by 4 grid of blank squares appears, each square representing a card. When a card is tapped, an image is shown on the card. When another card is clicked, an image is also shown on that second card. If the two images are the same, then the cards are considered to be matched, and will not change again for the rest of the game. If the images do not match, then the cards are considered to be unmatched, and cards must be turned back over by tapping on any card. These steps are to be repeated until all matching images have been found, and a "Congratulations" window appears.</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>When the game setting to have a picture shown on the squares is on, then a single picture is shown across all the squares. The sections of the picture will appear jumbled until the squares are arranged in their sorted order.</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>When using a screen reader with the game, move your finger around the screen to have the number of the square beneath your finger announced. Double tap to move a square.</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>Please note when a screen reader moves to the Menu button near the top left corner of the app, it may announce the button as the OK button or Menu button, or only announce the word button.</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>Would you like to play another game?</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>Would you like to play another game?</value>
  </data>
  <data name="String15" xml:space="preserve">
    <value>Note that screen readers may announce the menu button as the "OK" button or only as "button".</value>
  </data>
  <data name="String16" xml:space="preserve">
    <value />
  </data>
  <data name="String2" xml:space="preserve">
    <value>When using a screen reader with the game, move your finger around the screen to have the number of the card beneath your finger announced. Double tap to turn up a card. When a turned up card is matched, its name will be prefixed with "Matched".</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>Please note when a screen reader moves to the Menu button near the top left corner of the app, it may announce the button as the OK button or Menu button, or only announce the word button.</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>The Squares Game is based on a square sliding puzzle, where squares in a grid of squares are rearranged by the player to form an ordered sequence in the grid.</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>When the game is run, a 4 by 4 grid of squares appears, with fifteen of those squares occupied with a movable element, and one square being empty. When a square is tapped, if it is adjacent to the empty square, the tapped square moves into the empty square. The space where the tapped square was then becomes the empty square. The aim is to arrange all the squares in a sorted order, leaving the empty square in the bottom right corner of the grid. Once all the squares are ordered, a "Congratulations" window appears.</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Tip: Don't use a swipe gesture to move a square. Support for swipe gestures has yet to be added to the game.</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>Tip: Don't tap on the empty square. Instead tap on the squares next to the empty square.</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>When the game first runs, the setting to have numbers shown on squares is on, and the settings to have pictures shown on the squares is off. This means a number is shown in the top left corner of the squares. When the squares are sorted, the square showing number 1 is at the top left of the grid, and the numbers increase from left to right then top to bottom.</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>Tip: Practice moving numbered squares around before changing the setting to have a picture shown on the squares.</value>
  </data>
  <data name="Sudoku" xml:space="preserve">
    <value>Sudoku</value>
  </data>
  <data name="SudokuDifficultyLevelInstructions" xml:space="preserve">
    <value>Select the number of blank squares in the grid when a new game is started.</value>
  </data>
  <data name="SudokuEmptySquareIndicator" xml:space="preserve">
    <value>Empty Square Indicator</value>
  </data>
  <data name="SudokuEmptySquareIndicatorCheckBoxLabel" xml:space="preserve">
    <value>Show an 'x' in empty squares:</value>
  </data>
  <data name="SudokuEmptySquareIndicatorInstructions" xml:space="preserve">
    <value>Select this if the letter 'x' should show in empty squares.</value>
  </data>
  <data name="SudokuHelpEditor" xml:space="preserve">
    <value>Sudoku Help</value>
  </data>
  <data name="SudokuReadyToPlay" xml:space="preserve">
    <value>The Sudoku game is ready to play!</value>
  </data>
  <data name="SudokuResponseWhenNoMoveAvailable" xml:space="preserve">
    <value>Game response when an attempted move cannot be made</value>
  </data>
  <data name="SudokuResponseWhenNoMoveAvailableInstructions" xml:space="preserve">
    <value>Select the response the game should make when an attempt to move to another square could not be made.</value>
  </data>
  <data name="SudokuSettings" xml:space="preserve">
    <value>Sudoku Settings</value>
  </data>
  <data name="SudokuSquares" xml:space="preserve">
    <value>Sudoku Squares</value>
  </data>
  <data name="SudokuWelcome" xml:space="preserve">
    <value>Welcome to the Sudoku Game!</value>
  </data>
  <data name="Sweeper" xml:space="preserve">
    <value>Leaf Sweeper</value>
  </data>
  <data name="SweeperHelpEditor" xml:space="preserve">
    <value>Leaf Sweeper Help</value>
  </data>
  <data name="SweeperSettings" xml:space="preserve">
    <value>Sweeper Settings</value>
  </data>
  <data name="SweeperSquares" xml:space="preserve">
    <value>Sweeper Squares</value>
  </data>
  <data name="SweeperWelcome" xml:space="preserve">
    <value>Welcome to the Leaf Sweeper Game!</value>
  </data>
  <data name="Ten" xml:space="preserve">
    <value>ten</value>
  </data>
  <data name="ThatsMatch" xml:space="preserve">
    <value>That's a match.</value>
  </data>
  <data name="Thirteen" xml:space="preserve">
    <value>thirteen</value>
  </data>
  <data name="Three" xml:space="preserve">
    <value>three</value>
  </data>
  <data name="TipVisitEN301" xml:space="preserve">
    <value>Many apps that ship in Europe are subject to the European standard for digital accessibility, EN 301 549. Many of those standards are based on WCAG.</value>
  </data>
  <data name="TurnedUp" xml:space="preserve">
    <value>Turned up</value>
  </data>
  <data name="Twelve" xml:space="preserve">
    <value>twelve</value>
  </data>
  <data name="Two" xml:space="preserve">
    <value>two</value>
  </data>
  <data name="UnexpectedDataInFile" xml:space="preserve">
    <value>The PairsGamePictureDetails file does not contain the expected data. Please review the Pairs Help for more details.</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="UnmatchedTurnedBack" xml:space="preserve">
    <value>Unmatched cards turned back.</value>
  </data>
  <data name="Up" xml:space="preserve">
    <value>up</value>
  </data>
  <data name="WelcomeInstructions" xml:space="preserve">
    <value>After closing this message, please review the help content for details on how to play this game.

The help content can be reached via the menu button at the top left corner of the app. Screen readers may announce this button as the "Open Navigation" button or "Menu" button. When the menu button is clicked, a menu of items is shown beneath it. The items can be used to switch between the games, or to restart a game, or to have the help content shown.</value>
  </data>
  <data name="WonInMoves" xml:space="preserve">
    <value>You won the game in {0} goes.

Would you like to play another game?</value>
  </data>
  <data name="WonInMovesWithBonusQuestionCount" xml:space="preserve">
    <value>You won the game in {0} goes, and got {1} bonus questions correct!

Would you like to play another game?</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>